{"ast":null,"code":"import { getAllBooks as apiGetAllBooks, getBooksByType as apiGetBooksByType, createBook as apiCreateBook, findBookByTitle as apiFindBookByTitle } from './apiService';\nconst bookService = {\n  // Obtener todos los libros\n  getAllBooks: async () => {\n    try {\n      return await apiGetAllBooks();\n    } catch (error) {\n      throw new Error('Error al obtener libros: ' + error.message);\n    }\n  },\n  // Obtener libros por tipo\n  getBooksByType: async type => {\n    try {\n      return await apiGetBooksByType(type);\n    } catch (error) {\n      throw new Error('Error al obtener libros por tipo: ' + error.message);\n    }\n  },\n  // Obtener libro por ID (no implementado en el backend actual)\n  getBookById: async id => {\n    try {\n      throw new Error('Función no implementada en el backend');\n    } catch (error) {\n      throw new Error('Error al obtener libro: ' + error.message);\n    }\n  },\n  // Crear nuevo libro (Admin)\n  createBook: async bookData => {\n    try {\n      return await apiCreateBook(bookData);\n    } catch (error) {\n      throw new Error('Error al crear libro: ' + error.message);\n    }\n  },\n  // Actualizar libro (Admin) - no implementado en el backend actual\n  updateBook: async (id, bookData) => {\n    try {\n      throw new Error('Función no implementada en el backend');\n    } catch (error) {\n      throw new Error('Error al actualizar libro: ' + error.message);\n    }\n  },\n  // Eliminar libro (Admin) - no implementado en el backend actual\n  deleteBook: async id => {\n    try {\n      throw new Error('Función no implementada en el backend');\n    } catch (error) {\n      throw new Error('Error al eliminar libro: ' + error.message);\n    }\n  },\n  // Buscar libros\n  searchBooks: async query => {\n    try {\n      return await apiFindBookByTitle(query);\n    } catch (error) {\n      throw new Error('Error al buscar libros: ' + error.message);\n    }\n  }\n};\nexport default bookService;","map":{"version":3,"names":["getAllBooks","apiGetAllBooks","getBooksByType","apiGetBooksByType","createBook","apiCreateBook","findBookByTitle","apiFindBookByTitle","bookService","error","Error","message","type","getBookById","id","bookData","updateBook","deleteBook","searchBooks","query"],"sources":["C:/Users/jpval/OneDrive/Desktop/jp/aplicaciones web/app_libreria_1/Frontend/src/services/bookService.js"],"sourcesContent":["import { \r\n  getAllBooks as apiGetAllBooks,\r\n  getBooksByType as apiGetBooksByType,\r\n  createBook as apiCreateBook,\r\n  findBookByTitle as apiFindBookByTitle\r\n} from './apiService';\r\n\r\nconst bookService = {\r\n  // Obtener todos los libros\r\n  getAllBooks: async () => {\r\n    try {\r\n      return await apiGetAllBooks();\r\n    } catch (error) {\r\n      throw new Error('Error al obtener libros: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Obtener libros por tipo\r\n  getBooksByType: async (type) => {\r\n    try {\r\n      return await apiGetBooksByType(type);\r\n    } catch (error) {\r\n      throw new Error('Error al obtener libros por tipo: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Obtener libro por ID (no implementado en el backend actual)\r\n  getBookById: async (id) => {\r\n    try {\r\n      throw new Error('Función no implementada en el backend');\r\n    } catch (error) {\r\n      throw new Error('Error al obtener libro: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Crear nuevo libro (Admin)\r\n  createBook: async (bookData) => {\r\n    try {\r\n      return await apiCreateBook(bookData);\r\n    } catch (error) {\r\n      throw new Error('Error al crear libro: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Actualizar libro (Admin) - no implementado en el backend actual\r\n  updateBook: async (id, bookData) => {\r\n    try {\r\n      throw new Error('Función no implementada en el backend');\r\n    } catch (error) {\r\n      throw new Error('Error al actualizar libro: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Eliminar libro (Admin) - no implementado en el backend actual\r\n  deleteBook: async (id) => {\r\n    try {\r\n      throw new Error('Función no implementada en el backend');\r\n    } catch (error) {\r\n      throw new Error('Error al eliminar libro: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Buscar libros\r\n  searchBooks: async (query) => {\r\n    try {\r\n      return await apiFindBookByTitle(query);\r\n    } catch (error) {\r\n      throw new Error('Error al buscar libros: ' + error.message);\r\n    }\r\n  }\r\n};\r\n\r\nexport default bookService;"],"mappings":"AAAA,SACEA,WAAW,IAAIC,cAAc,EAC7BC,cAAc,IAAIC,iBAAiB,EACnCC,UAAU,IAAIC,aAAa,EAC3BC,eAAe,IAAIC,kBAAkB,QAChC,cAAc;AAErB,MAAMC,WAAW,GAAG;EAClB;EACAR,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,OAAO,MAAMC,cAAc,CAAC,CAAC;IAC/B,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,2BAA2B,GAAGD,KAAK,CAACE,OAAO,CAAC;IAC9D;EACF,CAAC;EAED;EACAT,cAAc,EAAE,MAAOU,IAAI,IAAK;IAC9B,IAAI;MACF,OAAO,MAAMT,iBAAiB,CAACS,IAAI,CAAC;IACtC,CAAC,CAAC,OAAOH,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,oCAAoC,GAAGD,KAAK,CAACE,OAAO,CAAC;IACvE;EACF,CAAC;EAED;EACAE,WAAW,EAAE,MAAOC,EAAE,IAAK;IACzB,IAAI;MACF,MAAM,IAAIJ,KAAK,CAAC,uCAAuC,CAAC;IAC1D,CAAC,CAAC,OAAOD,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,0BAA0B,GAAGD,KAAK,CAACE,OAAO,CAAC;IAC7D;EACF,CAAC;EAED;EACAP,UAAU,EAAE,MAAOW,QAAQ,IAAK;IAC9B,IAAI;MACF,OAAO,MAAMV,aAAa,CAACU,QAAQ,CAAC;IACtC,CAAC,CAAC,OAAON,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,wBAAwB,GAAGD,KAAK,CAACE,OAAO,CAAC;IAC3D;EACF,CAAC;EAED;EACAK,UAAU,EAAE,MAAAA,CAAOF,EAAE,EAAEC,QAAQ,KAAK;IAClC,IAAI;MACF,MAAM,IAAIL,KAAK,CAAC,uCAAuC,CAAC;IAC1D,CAAC,CAAC,OAAOD,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,GAAGD,KAAK,CAACE,OAAO,CAAC;IAChE;EACF,CAAC;EAED;EACAM,UAAU,EAAE,MAAOH,EAAE,IAAK;IACxB,IAAI;MACF,MAAM,IAAIJ,KAAK,CAAC,uCAAuC,CAAC;IAC1D,CAAC,CAAC,OAAOD,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,2BAA2B,GAAGD,KAAK,CAACE,OAAO,CAAC;IAC9D;EACF,CAAC;EAED;EACAO,WAAW,EAAE,MAAOC,KAAK,IAAK;IAC5B,IAAI;MACF,OAAO,MAAMZ,kBAAkB,CAACY,KAAK,CAAC;IACxC,CAAC,CAAC,OAAOV,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,0BAA0B,GAAGD,KAAK,CAACE,OAAO,CAAC;IAC7D;EACF;AACF,CAAC;AAED,eAAeH,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}