{"ast":null,"code":"import api from './api';\nconst readerService = {\n  // Obtener todos los lectores (Admin)\n  getAllReaders: async () => {\n    try {\n      const response = await api.get('/readers');\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al obtener lectores: ' + error.message);\n    }\n  },\n  // Obtener lector por ID\n  getReaderById: async id => {\n    try {\n      const response = await api.get(`/readers/${id}`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al obtener lector: ' + error.message);\n    }\n  },\n  // Buscar lectores\n  searchReaders: async query => {\n    try {\n      const response = await api.get(`/readers/search?q=${query}`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al buscar lectores: ' + error.message);\n    }\n  },\n  // Buscar lector por email\n  searchReaderByEmail: async email => {\n    try {\n      const response = await api.get(`/readers/email/${email}`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al buscar lector por email: ' + error.message);\n    }\n  },\n  // Buscar lector por RUT\n  searchReaderByRut: async rut => {\n    try {\n      const response = await api.get(`/readers/rut/${rut}`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al buscar lector por RUT: ' + error.message);\n    }\n  },\n  // Actualizar lector\n  updateReader: async (id, readerData) => {\n    try {\n      const response = await api.put(`/readers/${id}`, readerData);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al actualizar lector: ' + error.message);\n    }\n  },\n  // Eliminar lector (Admin)\n  deleteReader: async id => {\n    try {\n      const response = await api.delete(`/readers/${id}`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al eliminar lector: ' + error.message);\n    }\n  },\n  // Activar/desactivar lector (Admin)\n  toggleReaderStatus: async id => {\n    try {\n      const response = await api.put(`/readers/${id}/toggle-status`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al cambiar estado del lector: ' + error.message);\n    }\n  }\n};\nexport default readerService;","map":{"version":3,"names":["api","readerService","getAllReaders","response","get","data","error","Error","message","getReaderById","id","searchReaders","query","searchReaderByEmail","email","searchReaderByRut","rut","updateReader","readerData","put","deleteReader","delete","toggleReaderStatus"],"sources":["C:/Users/jp.maldonado/Desktop/Universidad/Aplicaciones web/app_libreria/Frontend/src/services/readerService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst readerService = {\r\n  // Obtener todos los lectores (Admin)\r\n  getAllReaders: async () => {\r\n    try {\r\n      const response = await api.get('/readers');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al obtener lectores: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Obtener lector por ID\r\n  getReaderById: async (id) => {\r\n    try {\r\n      const response = await api.get(`/readers/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al obtener lector: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Buscar lectores\r\n  searchReaders: async (query) => {\r\n    try {\r\n      const response = await api.get(`/readers/search?q=${query}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al buscar lectores: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Buscar lector por email\r\n  searchReaderByEmail: async (email) => {\r\n    try {\r\n      const response = await api.get(`/readers/email/${email}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al buscar lector por email: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Buscar lector por RUT\r\n  searchReaderByRut: async (rut) => {\r\n    try {\r\n      const response = await api.get(`/readers/rut/${rut}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al buscar lector por RUT: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Actualizar lector\r\n  updateReader: async (id, readerData) => {\r\n    try {\r\n      const response = await api.put(`/readers/${id}`, readerData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al actualizar lector: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Eliminar lector (Admin)\r\n  deleteReader: async (id) => {\r\n    try {\r\n      const response = await api.delete(`/readers/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al eliminar lector: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Activar/desactivar lector (Admin)\r\n  toggleReaderStatus: async (id) => {\r\n    try {\r\n      const response = await api.put(`/readers/${id}/toggle-status`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al cambiar estado del lector: ' + error.message);\r\n    }\r\n  }\r\n};\r\n\r\nexport default readerService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}