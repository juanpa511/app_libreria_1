{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jp.maldonado\\\\Desktop\\\\Universidad\\\\Aplicaciones web\\\\app_libreria\\\\Frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authService } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MOCK_USERS = {\n  'admin@test.com': {\n    id: 1,\n    email: 'admin@test.com',\n    name: 'Administrador',\n    role: 'admin',\n    password: 'admin123'\n  },\n  'user@test.com': {\n    id: 2,\n    email: 'user@test.com',\n    name: 'Usuario Regular',\n    role: 'reader',\n    password: 'user123'\n  }\n};\n\n// Estado inicial\nconst initialState = {\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  loading: true,\n  error: null\n};\n\n// Tipos de acciones\nconst AUTH_ACTIONS = {\n  LOGIN_START: 'LOGIN_START',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_ERROR: 'LOGIN_ERROR',\n  LOGOUT: 'LOGOUT',\n  REGISTER_START: 'REGISTER_START',\n  REGISTER_SUCCESS: 'REGISTER_SUCCESS',\n  REGISTER_ERROR: 'REGISTER_ERROR',\n  LOAD_USER: 'LOAD_USER',\n  CLEAR_ERROR: 'CLEAR_ERROR'\n};\n\n// Reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.LOGIN_START:\n    case AUTH_ACTIONS.REGISTER_START:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\n    case AUTH_ACTIONS.REGISTER_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isAuthenticated: true,\n        loading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGIN_ERROR:\n    case AUTH_ACTIONS.REGISTER_ERROR:\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        error: action.payload\n      };\n    case AUTH_ACTIONS.LOGOUT:\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.LOAD_USER:\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isAuthenticated: true,\n        loading: false\n      };\n    case AUTH_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Crear contexto\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Hook personalizado para usar el contexto\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\n  }\n  return context;\n};\n\n// Provider\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Cargar usuario al iniciar la aplicación\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const userData = localStorage.getItem('user');\n        if (token && userData) {\n          const user = JSON.parse(userData);\n          dispatch({\n            type: AUTH_ACTIONS.LOAD_USER,\n            payload: {\n              user,\n              token\n            }\n          });\n        } else {\n          dispatch({\n            type: AUTH_ACTIONS.LOGOUT\n          });\n        }\n      } catch (error) {\n        console.error('Error al cargar usuario:', error);\n        dispatch({\n          type: AUTH_ACTIONS.LOGOUT\n        });\n      }\n    };\n    loadUser();\n  }, []);\n\n  // Función de login\n  const login = async (email, password) => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_START\n      });\n\n      // Simular delay de red\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Verificar credenciales con usuarios simulados\n      const mockUser = MOCK_USERS[email];\n      if (!mockUser || mockUser.password !== password) {\n        throw new Error('Credenciales inválidas');\n      }\n\n      // Crear datos del usuario (sin password)\n      const user = {\n        id: mockUser.id,\n        email: mockUser.email,\n        name: mockUser.name,\n        role: mockUser.role\n      };\n\n      // Generar token simulado\n      const token = `fake-jwt-token-${user.id}-${Date.now()}`;\n\n      //const response = await authService.login(email, password);\n      //const { user, token } = response.data;\n\n      // Guardar en localStorage\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\n        payload: {\n          user,\n          token\n        }\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error al iniciar sesión';\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_ERROR,\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Función de registro\n  const register = async userData => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.REGISTER_START\n      });\n\n      // Simular delay de red\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Verificar si el email ya existe\n      if (MOCK_USERS[userData.email]) {\n        throw new Error('El email ya está registrado');\n      }\n\n      // Crear nuevo usuario\n      const user = {\n        id: Date.now(),\n        email: userData.email,\n        name: userData.name || 'Usuario',\n        role: 'reader' // Por defecto, nuevos usuarios son readers\n      };\n\n      // Generar token simulado\n      const token = `fake-jwt-token-${user.id}-${Date.now()}`;\n\n      //const response = await authService.register(userData);\n      //const { user, token } = response.data;\n\n      // Guardar en localStorage\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      dispatch({\n        type: AUTH_ACTIONS.REGISTER_SUCCESS,\n        payload: {\n          user,\n          token\n        }\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Error al registrarse';\n      dispatch({\n        type: AUTH_ACTIONS.REGISTER_ERROR,\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Función de logout\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    dispatch({\n      type: AUTH_ACTIONS.LOGOUT\n    });\n  };\n\n  // Función para limpiar errores\n  const clearError = () => {\n    dispatch({\n      type: AUTH_ACTIONS.CLEAR_ERROR\n    });\n  };\n\n  // Función para verificar si el usuario tiene un rol específico\n  const hasRole = role => {\n    var _state$user;\n    return ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : _state$user.role) === role;\n  };\n\n  // Función para verificar si el usuario es administrador\n  const isAdmin = () => {\n    return hasRole('admin');\n  };\n\n  // Función para verificar si el usuario es lector\n  const isReader = () => {\n    return hasRole('reader');\n  };\n\n  // Función para obtener información de usuarios disponibles (solo para desarrollo)\n  const getAvailableUsers = () => {\n    return Object.keys(MOCK_USERS).map(email => ({\n      email,\n      name: MOCK_USERS[email].name,\n      role: MOCK_USERS[email].role,\n      password: MOCK_USERS[email].password\n    }));\n  };\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    clearError,\n    hasRole,\n    isAdmin,\n    isReader,\n    getAvailableUsers\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 294,\n    columnNumber: 5\n  }, this);\n};\n\n// Exportar también el contexto para casos específicos\n_s2(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport { AuthContext };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authService","jsxDEV","_jsxDEV","MOCK_USERS","id","email","name","role","password","initialState","user","token","isAuthenticated","loading","error","AUTH_ACTIONS","LOGIN_START","LOGIN_SUCCESS","LOGIN_ERROR","LOGOUT","REGISTER_START","REGISTER_SUCCESS","REGISTER_ERROR","LOAD_USER","CLEAR_ERROR","authReducer","state","action","type","payload","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","dispatch","loadUser","localStorage","getItem","userData","JSON","parse","console","login","Promise","resolve","setTimeout","mockUser","Date","now","setItem","stringify","success","_error$response","_error$response$data","errorMessage","response","data","message","register","_error$response2","_error$response2$data","logout","removeItem","clearError","hasRole","_state$user","isAdmin","isReader","getAvailableUsers","Object","keys","map","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jp.maldonado/Desktop/Universidad/Aplicaciones web/app_libreria/Frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect,   } from 'react';\r\nimport { authService } from '../services/authService';\r\n\r\nconst MOCK_USERS = {\r\n  'admin@test.com': {\r\n    id: 1,\r\n    email: 'admin@test.com',\r\n    name: 'Administrador',\r\n    role: 'admin',\r\n    password: 'admin123'\r\n  },\r\n  'user@test.com': {\r\n    id: 2,\r\n    email: 'user@test.com',\r\n    name: 'Usuario Regular',\r\n    role: 'reader',\r\n    password: 'user123'\r\n  }\r\n};\r\n\r\n// Estado inicial\r\nconst initialState = {\r\n  user: null,\r\n  token: null,\r\n  isAuthenticated: false,\r\n  loading: true,\r\n  error: null\r\n};\r\n\r\n// Tipos de acciones\r\nconst AUTH_ACTIONS = {\r\n  LOGIN_START: 'LOGIN_START',\r\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n  LOGIN_ERROR: 'LOGIN_ERROR',\r\n  LOGOUT: 'LOGOUT',\r\n  REGISTER_START: 'REGISTER_START',\r\n  REGISTER_SUCCESS: 'REGISTER_SUCCESS',\r\n  REGISTER_ERROR: 'REGISTER_ERROR',\r\n  LOAD_USER: 'LOAD_USER',\r\n  CLEAR_ERROR: 'CLEAR_ERROR'\r\n};\r\n\r\n// Reducer\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case AUTH_ACTIONS.LOGIN_START:\r\n    case AUTH_ACTIONS.REGISTER_START:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n      };\r\n    \r\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\r\n    case AUTH_ACTIONS.REGISTER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        isAuthenticated: true,\r\n        loading: false,\r\n        error: null\r\n      };\r\n    \r\n    case AUTH_ACTIONS.LOGIN_ERROR:\r\n    case AUTH_ACTIONS.REGISTER_ERROR:\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n    \r\n    case AUTH_ACTIONS.LOGOUT:\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        error: null\r\n      };\r\n    \r\n    case AUTH_ACTIONS.LOAD_USER:\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        isAuthenticated: true,\r\n        loading: false\r\n      };\r\n    \r\n    case AUTH_ACTIONS.CLEAR_ERROR:\r\n      return {\r\n        ...state,\r\n        error: null\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Crear contexto\r\nconst AuthContext = createContext();\r\n\r\n// Hook personalizado para usar el contexto\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Provider\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // Cargar usuario al iniciar la aplicación\r\n  useEffect(() => {\r\n    const loadUser = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const userData = localStorage.getItem('user');\r\n        \r\n        if (token && userData) {\r\n          const user = JSON.parse(userData);\r\n          dispatch({\r\n            type: AUTH_ACTIONS.LOAD_USER,\r\n            payload: { user, token }\r\n          });\r\n        } else {\r\n          dispatch({ type: AUTH_ACTIONS.LOGOUT });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al cargar usuario:', error);\r\n        dispatch({ type: AUTH_ACTIONS.LOGOUT });\r\n      }\r\n    };\r\n\r\n    loadUser();\r\n  }, []);\r\n\r\n  // Función de login\r\n  const login = async (email, password) => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.LOGIN_START });\r\n\r\n         // Simular delay de red\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Verificar credenciales con usuarios simulados\r\n      const mockUser = MOCK_USERS[email];\r\n      if (!mockUser || mockUser.password !== password) {\r\n        throw new Error('Credenciales inválidas');\r\n      }\r\n      \r\n      // Crear datos del usuario (sin password)\r\n      const user = {\r\n        id: mockUser.id,\r\n        email: mockUser.email,\r\n        name: mockUser.name,\r\n        role: mockUser.role\r\n      };\r\n      \r\n      // Generar token simulado\r\n      const token = `fake-jwt-token-${user.id}-${Date.now()}`;\r\n      \r\n      \r\n      //const response = await authService.login(email, password);\r\n      //const { user, token } = response.data;\r\n      \r\n      // Guardar en localStorage\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      \r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\r\n        payload: { user, token }\r\n      });\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Error al iniciar sesión';\r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_ERROR,\r\n        payload: errorMessage\r\n      });\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Función de registro\r\n  const register = async (userData) => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.REGISTER_START });\r\n      \r\n      // Simular delay de red\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Verificar si el email ya existe\r\n      if (MOCK_USERS[userData.email]) {\r\n        throw new Error('El email ya está registrado');\r\n      }\r\n      \r\n      // Crear nuevo usuario\r\n      const user = {\r\n        id: Date.now(),\r\n        email: userData.email,\r\n        name: userData.name || 'Usuario',\r\n        role: 'reader' // Por defecto, nuevos usuarios son readers\r\n      };\r\n      \r\n      // Generar token simulado\r\n      const token = `fake-jwt-token-${user.id}-${Date.now()}`;\r\n      \r\n\r\n      //const response = await authService.register(userData);\r\n      //const { user, token } = response.data;\r\n      \r\n      // Guardar en localStorage\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      \r\n      dispatch({\r\n        type: AUTH_ACTIONS.REGISTER_SUCCESS,\r\n        payload: { user, token }\r\n      });\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Error al registrarse';\r\n      dispatch({\r\n        type: AUTH_ACTIONS.REGISTER_ERROR,\r\n        payload: errorMessage\r\n      });\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Función de logout\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    dispatch({ type: AUTH_ACTIONS.LOGOUT });\r\n  };\r\n\r\n  // Función para limpiar errores\r\n  const clearError = () => {\r\n    dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\r\n  };\r\n\r\n  // Función para verificar si el usuario tiene un rol específico\r\n  const hasRole = (role) => {\r\n    return state.user?.role === role;\r\n  };\r\n\r\n  // Función para verificar si el usuario es administrador\r\n  const isAdmin = () => {\r\n    return hasRole('admin');\r\n  };\r\n\r\n  // Función para verificar si el usuario es lector\r\n  const isReader = () => {\r\n    return hasRole('reader');\r\n  };\r\n\r\n    // Función para obtener información de usuarios disponibles (solo para desarrollo)\r\n  const getAvailableUsers = () => {\r\n    return Object.keys(MOCK_USERS).map(email => ({\r\n      email,\r\n      name: MOCK_USERS[email].name,\r\n      role: MOCK_USERS[email].role,\r\n      password: MOCK_USERS[email].password\r\n    }));\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    login,\r\n    register,\r\n    logout,\r\n    clearError,\r\n    hasRole,\r\n    isAdmin,\r\n    isReader,\r\n    getAvailableUsers\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Exportar también el contexto para casos específicos\r\nexport { AuthContext };"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAW,OAAO;AAClF,SAASC,WAAW,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,UAAU,GAAG;EACjB,gBAAgB,EAAE;IAChBC,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,gBAAgB;IACvBC,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE;EACZ,CAAC;EACD,eAAe,EAAE;IACfJ,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,eAAe;IACtBC,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE,QAAQ;IACdC,QAAQ,EAAE;EACZ;AACF,CAAC;;AAED;AACA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,eAAe,EAAE,KAAK;EACtBC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,YAAY,GAAG;EACnBC,WAAW,EAAE,aAAa;EAC1BC,aAAa,EAAE,eAAe;EAC9BC,WAAW,EAAE,aAAa;EAC1BC,MAAM,EAAE,QAAQ;EAChBC,cAAc,EAAE,gBAAgB;EAChCC,gBAAgB,EAAE,kBAAkB;EACpCC,cAAc,EAAE,gBAAgB;EAChCC,SAAS,EAAE,WAAW;EACtBC,WAAW,EAAE;AACf,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKb,YAAY,CAACC,WAAW;IAC7B,KAAKD,YAAY,CAACK,cAAc;MAC9B,OAAO;QACL,GAAGM,KAAK;QACRb,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE;MACT,CAAC;IAEH,KAAKC,YAAY,CAACE,aAAa;IAC/B,KAAKF,YAAY,CAACM,gBAAgB;MAChC,OAAO;QACL,GAAGK,KAAK;QACRhB,IAAI,EAAEiB,MAAM,CAACE,OAAO,CAACnB,IAAI;QACzBC,KAAK,EAAEgB,MAAM,CAACE,OAAO,CAAClB,KAAK;QAC3BC,eAAe,EAAE,IAAI;QACrBC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IAEH,KAAKC,YAAY,CAACG,WAAW;IAC7B,KAAKH,YAAY,CAACO,cAAc;MAC9B,OAAO;QACL,GAAGI,KAAK;QACRhB,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,IAAI;QACXC,eAAe,EAAE,KAAK;QACtBC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEa,MAAM,CAACE;MAChB,CAAC;IAEH,KAAKd,YAAY,CAACI,MAAM;MACtB,OAAO;QACL,GAAGO,KAAK;QACRhB,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,IAAI;QACXC,eAAe,EAAE,KAAK;QACtBC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IAEH,KAAKC,YAAY,CAACQ,SAAS;MACzB,OAAO;QACL,GAAGG,KAAK;QACRhB,IAAI,EAAEiB,MAAM,CAACE,OAAO,CAACnB,IAAI;QACzBC,KAAK,EAAEgB,MAAM,CAACE,OAAO,CAAClB,KAAK;QAC3BC,eAAe,EAAE,IAAI;QACrBC,OAAO,EAAE;MACX,CAAC;IAEH,KAAKE,YAAY,CAACS,WAAW;MAC3B,OAAO;QACL,GAAGE,KAAK;QACRZ,KAAK,EAAE;MACT,CAAC;IAEH;MACE,OAAOY,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMI,WAAW,gBAAGlC,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMmC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGpC,UAAU,CAACiC,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;EACrE;EACA,OAAOD,OAAO;AAChB,CAAC;;AAED;AAAAD,EAAA,CARaD,OAAO;AASpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACX,KAAK,EAAEY,QAAQ,CAAC,GAAGxC,UAAU,CAAC2B,WAAW,EAAEhB,YAAY,CAAC;;EAE/D;EACAV,SAAS,CAAC,MAAM;IACd,MAAMwC,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF,MAAM5B,KAAK,GAAG6B,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,MAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;QAE7C,IAAI9B,KAAK,IAAI+B,QAAQ,EAAE;UACrB,MAAMhC,IAAI,GAAGiC,IAAI,CAACC,KAAK,CAACF,QAAQ,CAAC;UACjCJ,QAAQ,CAAC;YACPV,IAAI,EAAEb,YAAY,CAACQ,SAAS;YAC5BM,OAAO,EAAE;cAAEnB,IAAI;cAAEC;YAAM;UACzB,CAAC,CAAC;QACJ,CAAC,MAAM;UACL2B,QAAQ,CAAC;YAAEV,IAAI,EAAEb,YAAY,CAACI;UAAO,CAAC,CAAC;QACzC;MACF,CAAC,CAAC,OAAOL,KAAK,EAAE;QACd+B,OAAO,CAAC/B,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDwB,QAAQ,CAAC;UAAEV,IAAI,EAAEb,YAAY,CAACI;QAAO,CAAC,CAAC;MACzC;IACF,CAAC;IAEDoB,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMO,KAAK,GAAG,MAAAA,CAAOzC,KAAK,EAAEG,QAAQ,KAAK;IACvC,IAAI;MACF8B,QAAQ,CAAC;QAAEV,IAAI,EAAEb,YAAY,CAACC;MAAY,CAAC,CAAC;;MAEzC;MACH,MAAM,IAAI+B,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;MAEvD;MACA,MAAME,QAAQ,GAAG/C,UAAU,CAACE,KAAK,CAAC;MAClC,IAAI,CAAC6C,QAAQ,IAAIA,QAAQ,CAAC1C,QAAQ,KAAKA,QAAQ,EAAE;QAC/C,MAAM,IAAI0B,KAAK,CAAC,wBAAwB,CAAC;MAC3C;;MAEA;MACA,MAAMxB,IAAI,GAAG;QACXN,EAAE,EAAE8C,QAAQ,CAAC9C,EAAE;QACfC,KAAK,EAAE6C,QAAQ,CAAC7C,KAAK;QACrBC,IAAI,EAAE4C,QAAQ,CAAC5C,IAAI;QACnBC,IAAI,EAAE2C,QAAQ,CAAC3C;MACjB,CAAC;;MAED;MACA,MAAMI,KAAK,GAAG,kBAAkBD,IAAI,CAACN,EAAE,IAAI+C,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;;MAGvD;MACA;;MAEA;MACAZ,YAAY,CAACa,OAAO,CAAC,OAAO,EAAE1C,KAAK,CAAC;MACpC6B,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAAC5C,IAAI,CAAC,CAAC;MAElD4B,QAAQ,CAAC;QACPV,IAAI,EAAEb,YAAY,CAACE,aAAa;QAChCY,OAAO,EAAE;UAAEnB,IAAI;UAAEC;QAAM;MACzB,CAAC,CAAC;MAEF,OAAO;QAAE4C,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOzC,KAAK,EAAE;MAAA,IAAA0C,eAAA,EAAAC,oBAAA;MACd,MAAMC,YAAY,GAAG,EAAAF,eAAA,GAAA1C,KAAK,CAAC6C,QAAQ,cAAAH,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBI,IAAI,cAAAH,oBAAA,uBAApBA,oBAAA,CAAsBI,OAAO,KAAI,yBAAyB;MAC/EvB,QAAQ,CAAC;QACPV,IAAI,EAAEb,YAAY,CAACG,WAAW;QAC9BW,OAAO,EAAE6B;MACX,CAAC,CAAC;MACF,OAAO;QAAEH,OAAO,EAAE,KAAK;QAAEzC,KAAK,EAAE4C;MAAa,CAAC;IAChD;EACF,CAAC;;EAED;EACA,MAAMI,QAAQ,GAAG,MAAOpB,QAAQ,IAAK;IACnC,IAAI;MACFJ,QAAQ,CAAC;QAAEV,IAAI,EAAEb,YAAY,CAACK;MAAe,CAAC,CAAC;;MAE/C;MACA,MAAM,IAAI2B,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;MAEvD;MACA,IAAI7C,UAAU,CAACuC,QAAQ,CAACrC,KAAK,CAAC,EAAE;QAC9B,MAAM,IAAI6B,KAAK,CAAC,6BAA6B,CAAC;MAChD;;MAEA;MACA,MAAMxB,IAAI,GAAG;QACXN,EAAE,EAAE+C,IAAI,CAACC,GAAG,CAAC,CAAC;QACd/C,KAAK,EAAEqC,QAAQ,CAACrC,KAAK;QACrBC,IAAI,EAAEoC,QAAQ,CAACpC,IAAI,IAAI,SAAS;QAChCC,IAAI,EAAE,QAAQ,CAAC;MACjB,CAAC;;MAED;MACA,MAAMI,KAAK,GAAG,kBAAkBD,IAAI,CAACN,EAAE,IAAI+C,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;;MAGvD;MACA;;MAEA;MACAZ,YAAY,CAACa,OAAO,CAAC,OAAO,EAAE1C,KAAK,CAAC;MACpC6B,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAAC5C,IAAI,CAAC,CAAC;MAElD4B,QAAQ,CAAC;QACPV,IAAI,EAAEb,YAAY,CAACM,gBAAgB;QACnCQ,OAAO,EAAE;UAAEnB,IAAI;UAAEC;QAAM;MACzB,CAAC,CAAC;MAEF,OAAO;QAAE4C,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOzC,KAAK,EAAE;MAAA,IAAAiD,gBAAA,EAAAC,qBAAA;MACd,MAAMN,YAAY,GAAG,EAAAK,gBAAA,GAAAjD,KAAK,CAAC6C,QAAQ,cAAAI,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBH,IAAI,cAAAI,qBAAA,uBAApBA,qBAAA,CAAsBH,OAAO,KAAI,sBAAsB;MAC5EvB,QAAQ,CAAC;QACPV,IAAI,EAAEb,YAAY,CAACO,cAAc;QACjCO,OAAO,EAAE6B;MACX,CAAC,CAAC;MACF,OAAO;QAAEH,OAAO,EAAE,KAAK;QAAEzC,KAAK,EAAE4C;MAAa,CAAC;IAChD;EACF,CAAC;;EAED;EACA,MAAMO,MAAM,GAAGA,CAAA,KAAM;IACnBzB,YAAY,CAAC0B,UAAU,CAAC,OAAO,CAAC;IAChC1B,YAAY,CAAC0B,UAAU,CAAC,MAAM,CAAC;IAC/B5B,QAAQ,CAAC;MAAEV,IAAI,EAAEb,YAAY,CAACI;IAAO,CAAC,CAAC;EACzC,CAAC;;EAED;EACA,MAAMgD,UAAU,GAAGA,CAAA,KAAM;IACvB7B,QAAQ,CAAC;MAAEV,IAAI,EAAEb,YAAY,CAACS;IAAY,CAAC,CAAC;EAC9C,CAAC;;EAED;EACA,MAAM4C,OAAO,GAAI7D,IAAI,IAAK;IAAA,IAAA8D,WAAA;IACxB,OAAO,EAAAA,WAAA,GAAA3C,KAAK,CAAChB,IAAI,cAAA2D,WAAA,uBAAVA,WAAA,CAAY9D,IAAI,MAAKA,IAAI;EAClC,CAAC;;EAED;EACA,MAAM+D,OAAO,GAAGA,CAAA,KAAM;IACpB,OAAOF,OAAO,CAAC,OAAO,CAAC;EACzB,CAAC;;EAED;EACA,MAAMG,QAAQ,GAAGA,CAAA,KAAM;IACrB,OAAOH,OAAO,CAAC,QAAQ,CAAC;EAC1B,CAAC;;EAEC;EACF,MAAMI,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,OAAOC,MAAM,CAACC,IAAI,CAACvE,UAAU,CAAC,CAACwE,GAAG,CAACtE,KAAK,KAAK;MAC3CA,KAAK;MACLC,IAAI,EAAEH,UAAU,CAACE,KAAK,CAAC,CAACC,IAAI;MAC5BC,IAAI,EAAEJ,UAAU,CAACE,KAAK,CAAC,CAACE,IAAI;MAC5BC,QAAQ,EAAEL,UAAU,CAACE,KAAK,CAAC,CAACG;IAC9B,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMoE,KAAK,GAAG;IACZ,GAAGlD,KAAK;IACRoB,KAAK;IACLgB,QAAQ;IACRG,MAAM;IACNE,UAAU;IACVC,OAAO;IACPE,OAAO;IACPC,QAAQ;IACRC;EACF,CAAC;EAED,oBACEtE,OAAA,CAAC4B,WAAW,CAAC+C,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAxC,QAAA,EAChCA;EAAQ;IAAA0C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAA5C,GAAA,CArLaF,YAAY;AAAA+C,EAAA,GAAZ/C,YAAY;AAsLzB,SAASL,WAAW;AAAG,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}