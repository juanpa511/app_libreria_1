{"ast":null,"code":"import api from './apiService';\nconst readerService = {\n  // Obtener todos los lectores (Admin)\n  getAllReaders: async () => {\n    try {\n      const response = await api.get('/reader/all');\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al obtener lectores: ' + error.message);\n    }\n  },\n  // Obtener lector por ID\n  getReaderById: async id => {\n    try {\n      const response = await api.get(`/reader/${id}`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al obtener lector: ' + error.message);\n    }\n  },\n  // Obtener detalles completos del lector\n  getReaderDetails: async id => {\n    try {\n      const response = await api.get(`/reader/${id}/details`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al obtener detalles del lector: ' + error.message);\n    }\n  },\n  // Buscar lectores\n  searchReaders: async query => {\n    try {\n      const response = await api.get(`/reader/search?q=${query}`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al buscar lectores: ' + error.message);\n    }\n  },\n  // Buscar lector por email\n  searchReaderByEmail: async email => {\n    try {\n      const response = await api.get(`/reader/find/${email}`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al buscar lector por email: ' + error.message);\n    }\n  },\n  // Buscar lector por RUT\n  searchReaderByRut: async rut => {\n    try {\n      const response = await api.get(`/readers/rut/${rut}`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al buscar lector por RUT: ' + error.message);\n    }\n  },\n  // Actualizar lector\n  updateReader: async (id, readerData) => {\n    try {\n      const response = await api.put(`/reader/${id}`, readerData);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al actualizar lector: ' + error.message);\n    }\n  },\n  // Eliminar lector (Admin)\n  deleteReader: async id => {\n    try {\n      const response = await api.delete(`/reader/${id}`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al eliminar lector: ' + error.message);\n    }\n  },\n  // Activar/desactivar lector (Admin)\n  toggleReaderStatus: async id => {\n    try {\n      const response = await api.put(`/reader/state/${id}`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al cambiar estado del lector: ' + error.message);\n    }\n  }\n};\nexport default readerService;","map":{"version":3,"names":["api","readerService","getAllReaders","response","get","data","error","Error","message","getReaderById","id","getReaderDetails","searchReaders","query","searchReaderByEmail","email","searchReaderByRut","rut","updateReader","readerData","put","deleteReader","delete","toggleReaderStatus"],"sources":["C:/Users/jpval/OneDrive/Desktop/jp/aplicaciones web/app_libreria_1/Frontend/src/services/readerService.js"],"sourcesContent":["import api from './apiService';\r\n\r\nconst readerService = {\r\n  // Obtener todos los lectores (Admin)\r\n  getAllReaders: async () => {\r\n    try {\r\n      const response = await api.get('/reader/all');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al obtener lectores: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Obtener lector por ID\r\n  getReaderById: async (id) => {\r\n    try {\r\n      const response = await api.get(`/reader/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al obtener lector: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Obtener detalles completos del lector\r\n  getReaderDetails: async (id) => {\r\n    try {\r\n      const response = await api.get(`/reader/${id}/details`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al obtener detalles del lector: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Buscar lectores\r\n  searchReaders: async (query) => {\r\n    try {\r\n      const response = await api.get(`/reader/search?q=${query}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al buscar lectores: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Buscar lector por email\r\n  searchReaderByEmail: async (email) => {\r\n    try {\r\n      const response = await api.get(`/reader/find/${email}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al buscar lector por email: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Buscar lector por RUT\r\n  searchReaderByRut: async (rut) => {\r\n    try {\r\n      const response = await api.get(`/readers/rut/${rut}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al buscar lector por RUT: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Actualizar lector\r\n  updateReader: async (id, readerData) => {\r\n    try {\r\n      const response = await api.put(`/reader/${id}`, readerData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al actualizar lector: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Eliminar lector (Admin)\r\n  deleteReader: async (id) => {\r\n    try {\r\n      const response = await api.delete(`/reader/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al eliminar lector: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Activar/desactivar lector (Admin)\r\n  toggleReaderStatus: async (id) => {\r\n    try {\r\n      const response = await api.put(`/reader/state/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al cambiar estado del lector: ' + error.message);\r\n    }\r\n  }\r\n};\r\n\r\nexport default readerService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}