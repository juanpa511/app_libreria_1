{"ast":null,"code":"import api from './api';\nexport const authService = {\n  // Iniciar sesión\n  login: async (email, password) => {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Registrar usuario\n  register: async userData => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Cerrar sesión\n  logout: async () => {\n    try {\n      await api.post('/auth/logout');\n    } catch (error) {\n      // Incluso si hay error en el servidor, limpiamos el token local\n      console.error('Error al cerrar sesión:', error);\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    }\n  },\n  // Verificar token\n  verifyToken: async () => {\n    try {\n      const response = await api.get('/auth/verify');\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Obtener perfil del usuario\n  getProfile: async () => {\n    try {\n      const response = await api.get('/auth/profile');\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Actualizar perfil\n  updateProfile: async userData => {\n    try {\n      const response = await api.put('/auth/profile', userData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Cambiar contraseña\n  changePassword: async (currentPassword, newPassword) => {\n    try {\n      const response = await api.put('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["api","authService","login","email","password","response","post","error","register","userData","logout","console","localStorage","removeItem","verifyToken","get","getProfile","updateProfile","put","changePassword","currentPassword","newPassword"],"sources":["C:/Users/jp.maldonado/Desktop/Universidad/Aplicaciones web/app_libreria/src/services/authService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const authService = {\r\n  // Iniciar sesión\r\n  login: async (email, password) => {\r\n    try {\r\n      const response = await api.post('/auth/login', {\r\n        email,\r\n        password\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Registrar usuario\r\n  register: async (userData) => {\r\n    try {\r\n      const response = await api.post('/auth/register', userData);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Cerrar sesión\r\n  logout: async () => {\r\n    try {\r\n      await api.post('/auth/logout');\r\n    } catch (error) {\r\n      // Incluso si hay error en el servidor, limpiamos el token local\r\n      console.error('Error al cerrar sesión:', error);\r\n    } finally {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n    }\r\n  },\r\n\r\n  // Verificar token\r\n  verifyToken: async () => {\r\n    try {\r\n      const response = await api.get('/auth/verify');\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener perfil del usuario\r\n  getProfile: async () => {\r\n    try {\r\n      const response = await api.get('/auth/profile');\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Actualizar perfil\r\n  updateProfile: async (userData) => {\r\n    try {\r\n      const response = await api.put('/auth/profile', userData);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Cambiar contraseña\r\n  changePassword: async (currentPassword, newPassword) => {\r\n    try {\r\n      const response = await api.put('/auth/change-password', {\r\n        currentPassword,\r\n        newPassword\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,aAAa,EAAE;QAC7CH,KAAK;QACLC;MACF,CAAC,CAAC;MACF,OAAOC,QAAQ;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAC,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,IAAI;MACF,MAAMJ,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,gBAAgB,EAAEG,QAAQ,CAAC;MAC3D,OAAOJ,QAAQ;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAG,MAAM,EAAE,MAAAA,CAAA,KAAY;IAClB,IAAI;MACF,MAAMV,GAAG,CAACM,IAAI,CAAC,cAAc,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;MACAI,OAAO,CAACJ,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD,CAAC,SAAS;MACRK,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;MAChCD,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;IACjC;EACF,CAAC;EAED;EACAC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAML,GAAG,CAACe,GAAG,CAAC,cAAc,CAAC;MAC9C,OAAOV,QAAQ;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAS,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAML,GAAG,CAACe,GAAG,CAAC,eAAe,CAAC;MAC/C,OAAOV,QAAQ;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAU,aAAa,EAAE,MAAOR,QAAQ,IAAK;IACjC,IAAI;MACF,MAAMJ,QAAQ,GAAG,MAAML,GAAG,CAACkB,GAAG,CAAC,eAAe,EAAET,QAAQ,CAAC;MACzD,OAAOJ,QAAQ;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAY,cAAc,EAAE,MAAAA,CAAOC,eAAe,EAAEC,WAAW,KAAK;IACtD,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAML,GAAG,CAACkB,GAAG,CAAC,uBAAuB,EAAE;QACtDE,eAAe;QACfC;MACF,CAAC,CAAC;MACF,OAAOhB,QAAQ;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}